{"remainingRequest":"C:\\Users\\Administrator\\Desktop\\权益\\demo\\node_modules\\babel-loader\\lib\\index.js!C:\\Users\\Administrator\\Desktop\\权益\\demo\\node_modules\\webpack-dev-server\\client\\utils\\createSocketUrl.js","dependencies":[{"path":"C:\\Users\\Administrator\\Desktop\\权益\\demo\\node_modules\\webpack-dev-server\\client\\utils\\createSocketUrl.js","mtime":1607394579472},{"path":"C:\\Users\\Administrator\\Desktop\\权益\\demo\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1607394529649},{"path":"C:\\Users\\Administrator\\Desktop\\权益\\demo\\node_modules\\babel-loader\\lib\\index.js","mtime":1607394629632}],"contextDependencies":[],"result":["'use strict';\n/* global self */\n\nimport \"core-js/modules/es6.array.index-of\";\nimport \"core-js/modules/es6.regexp.replace\";\n\nvar url = require('url');\n\nvar querystring = require('querystring');\n\nvar getCurrentScriptSource = require(\"./getCurrentScriptSource\");\n\nfunction createSocketUrl(resourceQuery) {\n  var urlParts;\n\n  if (typeof resourceQuery === 'string' && resourceQuery !== '') {\n    // If this bundle is inlined, use the resource query to get the correct url.\n    urlParts = url.parse(resourceQuery.substr(1));\n  } else {\n    // Else, get the url from the <script> this file was called with.\n    var scriptHost = getCurrentScriptSource(); // eslint-disable-next-line no-useless-escape\n\n    scriptHost = scriptHost.replace(/\\/[^\\/]+$/, '');\n    urlParts = url.parse(scriptHost || '/', false, true);\n  }\n\n  if (!urlParts.port || urlParts.port === '0') {\n    urlParts.port = self.location.port;\n  }\n\n  var _urlParts = urlParts,\n      auth = _urlParts.auth,\n      path = _urlParts.path;\n  var _urlParts2 = urlParts,\n      hostname = _urlParts2.hostname,\n      protocol = _urlParts2.protocol; // check ipv4 and ipv6 `all hostname`\n  // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n\n  if ((hostname === '0.0.0.0' || hostname === '::') && self.location.hostname && // eslint-disable-next-line no-bitwise\n  !!~self.location.protocol.indexOf('http')) {\n    hostname = self.location.hostname;\n  } // `hostname` can be empty when the script path is relative. In that case, specifying\n  // a protocol would result in an invalid URL.\n  // When https is used in the app, secure websockets are always necessary\n  // because the browser doesn't accept non-secure websockets.\n\n\n  if (hostname && (self.location.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {\n    protocol = self.location.protocol;\n  } // default values of the sock url if they are not provided\n\n\n  var sockHost = hostname;\n  var sockPath = '/sockjs-node';\n  var sockPort = urlParts.port; // eslint-disable-next-line no-undefined\n\n  if (path !== null && path !== undefined && path !== '/') {\n    var parsedQuery = querystring.parse(path); // all of these sock url params are optionally passed in through\n    // resourceQuery, so we need to fall back to the default if\n    // they are not provided\n\n    sockHost = parsedQuery.sockHost || sockHost;\n    sockPath = parsedQuery.sockPath || sockPath;\n    sockPort = parsedQuery.sockPort || sockPort;\n  }\n\n  return url.format({\n    protocol: protocol,\n    auth: auth,\n    hostname: sockHost,\n    port: sockPort,\n    // If sockPath is provided it'll be passed in via the resourceQuery as a\n    // query param so it has to be parsed out of the querystring in order for the\n    // client to open the socket to the correct location.\n    pathname: sockPath\n  });\n}\n\nmodule.exports = createSocketUrl;",{"version":3,"sources":["C:\\Users\\Administrator\\Desktop\\权益\\demo\\node_modules\\webpack-dev-server\\client\\utils\\createSocketUrl.js"],"names":["url","require","querystring","getCurrentScriptSource","createSocketUrl","resourceQuery","urlParts","parse","substr","scriptHost","replace","port","self","location","_urlParts","auth","path","_urlParts2","hostname","protocol","indexOf","sockHost","sockPath","sockPort","undefined","parsedQuery","format","pathname","module","exports"],"mappings":"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","sourcesContent":["'use strict';\n/* global self */\n\nvar url = require('url');\n\nvar querystring = require('querystring');\n\nvar getCurrentScriptSource = require('./getCurrentScriptSource');\n\nfunction createSocketUrl(resourceQuery) {\n  var urlParts;\n\n  if (typeof resourceQuery === 'string' && resourceQuery !== '') {\n    // If this bundle is inlined, use the resource query to get the correct url.\n    urlParts = url.parse(resourceQuery.substr(1));\n  } else {\n    // Else, get the url from the <script> this file was called with.\n    var scriptHost = getCurrentScriptSource(); // eslint-disable-next-line no-useless-escape\n\n    scriptHost = scriptHost.replace(/\\/[^\\/]+$/, '');\n    urlParts = url.parse(scriptHost || '/', false, true);\n  }\n\n  if (!urlParts.port || urlParts.port === '0') {\n    urlParts.port = self.location.port;\n  }\n\n  var _urlParts = urlParts,\n      auth = _urlParts.auth,\n      path = _urlParts.path;\n  var _urlParts2 = urlParts,\n      hostname = _urlParts2.hostname,\n      protocol = _urlParts2.protocol; // check ipv4 and ipv6 `all hostname`\n  // why do we need this check?\n  // hostname n/a for file protocol (example, when using electron, ionic)\n  // see: https://github.com/webpack/webpack-dev-server/pull/384\n\n  if ((hostname === '0.0.0.0' || hostname === '::') && self.location.hostname && // eslint-disable-next-line no-bitwise\n  !!~self.location.protocol.indexOf('http')) {\n    hostname = self.location.hostname;\n  } // `hostname` can be empty when the script path is relative. In that case, specifying\n  // a protocol would result in an invalid URL.\n  // When https is used in the app, secure websockets are always necessary\n  // because the browser doesn't accept non-secure websockets.\n\n\n  if (hostname && (self.location.protocol === 'https:' || urlParts.hostname === '0.0.0.0')) {\n    protocol = self.location.protocol;\n  } // default values of the sock url if they are not provided\n\n\n  var sockHost = hostname;\n  var sockPath = '/sockjs-node';\n  var sockPort = urlParts.port; // eslint-disable-next-line no-undefined\n\n  if (path !== null && path !== undefined && path !== '/') {\n    var parsedQuery = querystring.parse(path); // all of these sock url params are optionally passed in through\n    // resourceQuery, so we need to fall back to the default if\n    // they are not provided\n\n    sockHost = parsedQuery.sockHost || sockHost;\n    sockPath = parsedQuery.sockPath || sockPath;\n    sockPort = parsedQuery.sockPort || sockPort;\n  }\n\n  return url.format({\n    protocol: protocol,\n    auth: auth,\n    hostname: sockHost,\n    port: sockPort,\n    // If sockPath is provided it'll be passed in via the resourceQuery as a\n    // query param so it has to be parsed out of the querystring in order for the\n    // client to open the socket to the correct location.\n    pathname: sockPath\n  });\n}\n\nmodule.exports = createSocketUrl;"]}]}